grammar Expression

@header {
    import java.util.HashMap;
}

@members {
    HashMap<String, Integer> variables = new HashMap<>();
}

expr
    : setVar { System.out.println(setVar); } ';' expr
    | EPS
    ;

setVar returns [String result]
    : variable EQUAL add {
        int addResult = add;
        variables.put(variable, addResult);
        result = variable + " = " + String.valueOf(addResult);
    }
    ;

variable returns [String name]
    : /[a-z]+/ {
        name = lex.getCurString();
    }
    ;

add returns [int val]
    : mul add_[mul] { val = add_; }
    ;

add_[int acc] returns [int val]
    : ADD mul { int res = acc + mul; } add_[res] { val = add_; }
    | MINUS mul { int res = acc - mul; } add_[res] { val = add_; }
    | EPS { val = acc; }
    ;

mul returns [int val]
    : pow mul_[pow] { val = mul_; }
    ;

mul_[int acc] returns [int val]
    : MUL pow { int res = acc * pow; } mul_[res] { val = mul_; }
    | DIV pow { int res = acc / pow; } mul_[res] { val = mul_; }
    | EPS { val = acc; }
    ;

pow returns [int val]
    : term pow_ { val = (int)Math.pow(term, pow_); }
    ;

pow_ returns [int val]
    : POW term pow_ { val = (int)Math.pow(term, pow_); }
    | EPS { val = 1; }
    ;

term returns [int val]
    : NUM { val = Integer.parseInt(lex.getCurString()); }
    | variable { val = variables.get(variable); }
    | '(' add ')' { val = add; }
    ;

EQUAL
    : '='
    ;
MUL
    : '*'
    ;
ADD
    : '+'
    ;
MINUS
    : '-'
    ;
DIV
    : '/'
    ;
POW
    : '^'
    ;

NUM : /[1-9][0-9]*|0/ ;