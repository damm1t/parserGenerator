grammar Arithmetic

add returns [int val]
    : mul add_[mul] { val = add_; }
;

add_[int acc] returns [int val]
    : ADD mul { int res = acc + mul; } add_[res] { val = add_; }
    | MINUS mul { int res = acc - mul; } add_[res] { val = add_; }
    | EPS { val = acc; }
;

mul returns [int val]
    : term mul_[term] { val = mul_; }
;

mul_[int acc] returns [int val]
    : MUL term { int res = acc * term; } mul_[res] { val = mul_; }
    | DIV term { int res = acc / term; } mul_[res] { val = mul_; }
    | EPS { val = acc; }
;


term returns [int val]
    : NUM { val = Integer.parseInt(lex.getCurString()); }
    | '(' add ')' { val = add; }
;

MUL
    : '*'
    ;
ADD
    : '+'
    ;
MINUS
    : '-'
    ;
DIV
    : '/'
    ;

NUM : /[1-9][0-9]*|0/ ;